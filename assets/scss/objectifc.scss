// scss-docs-start gray-color-variables
$white: #fff;
$gray-100: #f8f9fa;
$gray-200: #e9ecef;
$gray-300: #dee2e6;
$gray-400: #ced4da;
$gray-500: #adb5bd;
$gray-600: #6c757d;
$gray-700: #495057;
$gray-800: #343a40;
$gray-900: #212529;
$black: #000;
// scss-docs-end gray-color-variables
// scss-docs-start color-variables
$blue: #0d6efd !default;
$indigo: #6610f2 !default;
$purple: #6f42c1 !default;
$pink: #d63384 !default;
$red: #dc3545 !default;
$orange: #fd7e14 !default;
$yellow: #ffc107 !default;
$green: #198754 !default;
$teal: #20c997 !default;
$cyan: #0dcaf0 !default;
// scss-docs-end color-variables

$primary: $blue;
$secondary: $gray-600;
$success: $green;
$info: $cyan;
$warning: $yellow;
$danger: $red;
$light: $gray-300;
$dark: $gray-800;

$theme-colors: (
  primary: $primary,
  secondary: $secondary,
  success: $success,
  info: $info,
  warning: $warning,
  danger: $danger,
  light: $light,
  dark: $dark,
);

// font
@font-face {
  font-family: "Text Gyre";
  src: url(../fonts/texgyreheros.gyreheros-regular.otf) format("opentype");
}
$font-family-sans-serif: "Text Gyre", -apple-system, BlinkMacSystemFont,
  "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji",
  "Segoe UI Emoji", "Segoe UI Symbol" !default;
$font-family-serif: Georgia, "Times New Roman", Times, serif !default;
$font-family-monospace: Menlo, Monaco, Consolas, "Liberation Mono",
  "Courier New", monospace !default;
$font-family-base: $font-family-sans-serif !default;

$font-size-base: 1rem !default; // Assumes the browser default, typically `16px`
$h5-font-size: $font-size-base * 1.1 !default;

// tabs
.nav-tabs .nav-item .nav-link {
  background-color: $light;
}
$link-color: $purple;
$nav-link-padding-y: 0.5rem;
$nav-link-padding-x: 1.25rem;
$nav-link-font-size: null;
$nav-link-font-weight: null;
$nav-link-color: $link-color;
$nav-link-transition: color 0.15s ease-in-out,
  background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;
$nav-tabs-border-color: $light;
$nav-tabs-border-radius: 0;
$nav-tabs-link-active-color: $dark;
$nav-tabs-link-active-bg: $white;
$nav-link-disabled-color: $gray-600;
$nav-tabs-link-active-border-color: $light;

// scss-docs-start container-max-widths
$container-max-widths: (
  xxl: 600px,
) !default;
// scss-docs-end container-max-widths

//  Objectif C contextual classes mixin BONUS
// This mixin will take the argument $color (which you get from the $theme-colors with the sass function map_get()) and provides different styling for all inner elements where needed using the provided color.

@mixin context-class($color) {
  .card-header,
  .card-footer {
    .nav-link {
      &.disabled {
        background-color: transparent;
      }
    }
  }

  @if $color == null {
    // map_get() returns NULL if the selected key does not exist. So if it's not in the list, it's something custom.
    .card {
      &-header,
      &-body {
        .nav-link.disabled {
          color: $white;
          background-color: $gray-600;
        }
      }

      &-header,
      &-footer {
        color: $white;
        background-color: $dark;
      }

      &-body {
        &,
        .card-header {
          color: $black;
          background-color: $white;
        }
        .nav-link {
          background-color: $white;
          border-color: $gray-300;
        }
        .card-subtitle,
        small {
          color: $gray-600;
        }
      }
    }
  } @else {
    // A valid color was provided, style everything accordingly.
    .card {
      &-header,
      &-footer {
        color: $white;
        background-color: darken($color, 10%);
        .nav-link {
          border-color: darken($color, 10%);
          background-color: $color;
          color: $white;
          &.active {
            $nav-tabs-link-active-bg: $color;
          }
        }
      }

      &-title,
      &-subtitle,
      &-text {
        &,
        small {
          color: $white;
        }
      }

      &-body {
        &,
        .card-header,
        .nav-link {
          background-color: $color;
        }
        .nav-link {
          $nav-tabs-link-active-bg: $color;
          color: $white;
          border-color: darken($color, 10%);
        }
      }
    }

    @if $color == $light or $color == $warning or $color == $info {
      // $light, $warning and $info uses black text, so make an exception here.
      // This @if is positioned below the previously defined styles so that it can overwrite them without the need to apply more specific selectors.
      .card {
        &-header,
        &-footer,
        &-title,
        &-subtitle,
        &-text {
          color: $black;
        }

        &-header,
        &-body,
        &-footer {
          .nav-link {
            color: $black;
          }
        }

        &-title,
        &-subtitle,
        &-text {
          small {
            color: $secondary;
          }
        }
      }
    }
  }
}
// cards

$card-spacer-y: 20px;
$card-spacer-x: 20px;
$card-inner-border-radius: 0;
$card-cap-padding-y: $card-spacer-y;
$card-cap-padding-x: $card-spacer-x;
$card-bg: $white;

.card {
  @include context-class(map_get($theme-colors, "custom"));
  // Call the mixin, with the contextual class.
  &.card-primary {
    @include context-class(map_get($theme-colors, "primary"));
  }
  &.card-secondary {
    @include context-class(map_get($theme-colors, "secondary"));
  }
  &.card-success {
    @include context-class(map_get($theme-colors, "success"));
  }
  &.card-danger {
    @include context-class(map_get($theme-colors, "danger"));
  }
  &.card-warning {
    @include context-class(map_get($theme-colors, "warning"));
  }
  &.card-info {
    @include context-class(map_get($theme-colors, "info"));
  }
  &.card-dark {
    @include context-class(map_get($theme-colors, "dark"));
  }
  &.card-light {
    @include context-class(map_get($theme-colors, "light"));
  }
  &.card-dark {
    @include context-class(map_get($theme-colors, "dark"));
  }
}

// Spinners

// scss-docs-start spinner-variables
$spinner-width: 3rem !default;
$spinner-height: $spinner-width !default;
$spinner-vertical-align: -0.125em !default;
$spinner-border-width: 0.15em;
$spinner-animation-speed: 3s !default;

$spinner-width-sm: 1rem !default;
$spinner-height-sm: $spinner-width-sm !default;
$spinner-border-width-sm: 0.2em !default;
// scss-docs-end spinner-variables

@import "../../node_modules/bootstrap/scss/bootstrap";
